name: Docker CI/CD for Spring Boot App

on:
  push:
    branches: [ main ] # 触发工作流程的分支

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/cicdtest # 替换 your-app-name
  # 如果使用 GitHub Container Registry (GHCR):
  # DOCKER_IMAGE_NAME_GHCR: ghcr.io/${{ github.repository_owner }}/your-app-name

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 如果使用 GHCR:
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的上下文路径
          file: ./Dockerfile # Dockerfile 的路径
          push: true # 推送镜像
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          # 如果使用 GHCR, 将 tags 改为:
          # tags: |
          #   ${{ env.DOCKER_IMAGE_NAME_GHCR }}:latest
          #   ${{ env.DOCKER_IMAGE_NAME_GHCR }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    name: Deploy to Cloud Server
    needs: build-and-push-docker-image # 依赖上一个作业
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3 # 使用一个流行的 SSH Action
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }} # 通常是 22
          debug: true
          script: |
            echo "Running on $(hostname) as $(whoami)"
            echo "Image: ${{ env.DOCKER_IMAGE_NAME }}:latest"
            # 拉取最新的 Docker 镜像
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            # 如果使用 GHCR, 则为:
            # docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} # 如果服务器需要登录 GHCR
            # docker pull ${{ env.DOCKER_IMAGE_NAME_GHCR }}:latest

            # 停止并移除旧的容器 (如果存在)
            docker stop cicdtest || true
            docker rm cicdtest || true

            # 运行新的容器
            # 将 <host_port> 替换为你想在服务器上暴露的端口 (例如 80 或 8080)
            # 将 <container_port> 替换为 Dockerfile 中 EXPOSE 的端口 (例如 8080)
            docker run -d -p 8080:8080 \
              --name cicdtest \
              --restart always \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
              # 如果使用 GHCR, 将镜像名替换为: ${{ env.DOCKER_IMAGE_NAME_GHCR }}:latest

            # (可选) 清理旧的、未使用的 Docker 镜像以释放空间
            docker image prune -af